클래스라는 설계도를 실체화한 것이 객체

접근제어자
접근제어자의 권한은 다음 접근 제어자를 만나기 전까지임
- private: 아래에 있는 것은 클래스 내에서만 접근 가능
- public: 아래 있는 것은 다른 곳에서 접근 가능
- protected: private과 public의 중간

생성자
- public 바로 아래에 해당 클라스를 다시 호출하면 객체로 호출하자마자 초기화 됨
- 반환형이 없음
- 객체명이 아니라 클래스명과 동일하게 호출해야 됨
- 중괄호 안이 비어있는 생성자가 자동으로 만들어짐, default constructor는 인자가 없음
- 오버로딩 가능 (생성자 여러개 생성 가능)

소멸자
- 오버로딩 불가능 (~클래스명()
- 클래스 내에서 선언한 동적할당에 대한 delete를 하기 위해 존재

객체지향 프로그래밍의 주요 4대 원칙 (무조건 나옴 영어로)
- 추상화(Abstraction): 클래스를 만드는 것, 데이터와 메서드를 묶어 이름을 붙이는 것, 복잡도를 관리할 수 있게 도와줌
- 캡슐화(Encapsulation): 정보 은닉, private에 넣어서 액세스에 접근하는 것을 제한하는 것, 보안을 위해 하는 것
- 상속(Inheritance): 클래스들을 조직화하는 방식, 상위 클래스와 하위 클래스로 구조화
- 다형성(Polymorphism): 이름은 동일하나 다른 매개변수를 갖는 것이 오버로딩, 형태가 같지만 다른 성질을 가지는 것, 정적 혹은 동적으로 구현 가능

overloading, overriding
- overloading: 정적
- overriding: 동적, 부모에 덮어써버림

class에서 method 선언의 2가지 방법
- 먼저 선언 후 정의: 길면 ' :: ' 을 통해 따로 정의
- 선언과 함께 정의: 짧으면 ㄱㅊ